async function setInstamartLocation(page, location) {
  console.log(`Setting Instamart location to: ${location}`);
  try {
    if (!page.url().includes("swiggy.com")) {
      await page.goto("https://www.swiggy.com/instamart");
    }

    // Check if location needs to be set
    try {
      // Click on location button if exists
      const locationBtnSelector = '[class*="location"], [class*="address"], .address-container, button:has(.location-icon)';
      const hasLocationBtn = await page.$(locationBtnSelector);
      
      if (hasLocationBtn) {
        await page.click(locationBtnSelector);
        console.log("Clicked Instamart location button");
        await new Promise(resolve => setTimeout(resolve, 1000));
      } else {
        // If no location button, check for location popup
        const locationInputSelector = 'input[id*="location"], input[placeholder*="location"], input[placeholder*="address"]';
        const hasLocationInput = await page.$(locationInputSelector);
        
        if (!hasLocationInput) {
          // If location is already set, return current location
          const currentLocation = await isLocationSet(page);
          if (currentLocation) {
            console.log(`Instamart location already set to: ${currentLocation}`);
            return currentLocation;
          }
        }
      }
      
      // Look for the location search input
      await page.waitForSelector('input[id*="location"], input[placeholder*="location"], input[placeholder*="address"]', { 
        timeout: 5000,
        visible: true
      });
      
      // Clear any existing input
      await page.evaluate(() => {
        const input = document.querySelector('input[id*="location"], input[placeholder*="location"], input[placeholder*="address"]');
        if (input) input.value = '';
      });
      
      // Type the location
      await page.type('input[id*="location"], input[placeholder*="location"], input[placeholder*="address"]', location);
      
      // Wait for suggestions to appear
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      // Click the first suggestion
      const suggestionSelector = '[class*="suggestion"]:first-child, [class*="list-item"]:first-child, [class*="address-item"]:first-child';
      await page.waitForSelector(suggestionSelector, { timeout: 5000 });
      await page.click(suggestionSelector);
      
      // Wait for location to be applied
      await new Promise(resolve => setTimeout(resolve, 2000));
      
    } catch (error) {
      console.error(`Error during Instamart location selection: ${error.message}`);
    }
    
    // Verify location was set
    const locationTitle = await isLocationSet(page);
    if (locationTitle) {
      console.log(`Instamart location successfully set to: ${locationTitle}`);
      return locationTitle;
    } else {
      console.log(`Failed to verify Instamart location after setting to: ${location}`);
      return null;
    }
  } catch (error) {
    console.error("Error setting Instamart location:", error);
    return null;
  }
}

async function isLocationSet(page) {
  console.log("Checking if Instamart location is set...");
  
  // Various possible selectors where Instamart might display the current location
  const locationSelectors = [
    '[class*="location-details"]',
    '[class*="location-description"]',
    '[class*="address-container"]',
    '.location-wrapper .address',
    '[class*="header"] [class*="location"]',
    '.location, .address'
  ];

  try {
    // Try each selector
    for (const selector of locationSelectors) {
      try {
        const exists = await page.$(selector);
        if (!exists) continue;
        
        const titleText = await page.$eval(selector, (el) => el.textContent.trim());
        if (titleText && titleText.length > 2 && !titleText.toLowerCase().includes("detect") && !titleText.toLowerCase().includes("select")) {
          console.log(`Instamart location found: "${titleText}"`);
          return titleText;
        }
      } catch (selectorError) {
        // Try next selector
      }
    }
    
    // Check if we're on a page that indicates location is set
    const isOnProductPage = await page.evaluate(() => {
      return document.querySelector('[class*="product-grid"], [class*="product-list"]') !== null;
    });
    
    if (isOnProductPage) {
      console.log("On Instamart products page, assuming location is set");
      return "Location Set";
    }
    
    return null;
  } catch (error) {
    console.error(`Error checking if Instamart location is set: ${error.message}`);
    return null;
  }
}

module.exports = {
  setInstamartLocation,
  isLocationSet
};
